services:
    users-service:
        build:
            context: ./services/users-service
            dockerfile: Dockerfile
        deploy:
            resources:
                limits:
                    cpus: "2.0"
        ports:
            - "8001:8000"
        volumes:
            - ./services/users-service:/app
            - users-vendor:/app/vendor
        depends_on:
            - users-db
            - redis
            - elasticsearch
            - kafka
            - prometheus
        networks:
            - app

    users-db:
        image: mysql:8.3
        environment:
            MYSQL_DATABASE: users_db
            MYSQL_USER: user
            MYSQL_PASSWORD: password
            MYSQL_ROOT_PASSWORD: rootpassword
        ports:
            - "3307:3306"
        volumes:
            - users-data:/var/lib/mysql
        restart: unless-stopped
        networks:
            - app

    teams-service:
        build:
            context: ./services/teams-service
            dockerfile: Dockerfile
        ports:
            - "8002:8080"
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
        depends_on:
            - teams-db
        networks:
            - app

    teams-db:
        image: mysql:8.3
        environment:
            MYSQL_DATABASE: teams_db
            MYSQL_USER: user
            MYSQL_PASSWORD: password
            MYSQL_ROOT_PASSWORD: rootpassword
        ports:
            - "3308:3306"
        volumes:
            - teams-data:/var/lib/mysql
        restart: unless-stopped
        networks:
            - app

    posts-service:
        build:
            context: ./services/posts_service
            dockerfile: Dockerfile
        volumes:
            - ./services/posts_service:/app
        ports:
            - 8003:8000
        depends_on:
            - posts-db
        networks:
            - app

    posts-db:
        image: mysql:8.3
        environment:
            MYSQL_DATABASE: posts_db
            MYSQL_USER: user
            MYSQL_PASSWORD: password
            MYSQL_ROOT_PASSWORD: rootpassword
        ports:
            - "3309:3306"
        volumes:
            - posts-data:/var/lib/mysql
        restart: unless-stopped
        networks:
            - app

    messages-service:
        build:
            context: ./services/messages-service
            dockerfile: Dockerfile
        ports:
            - "8004:3000"
        volumes:
            - ./services/messages-service:/app
            - messages-node_modules:/app/node_modules
        networks:
            - app

    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        ports:
            - "443:443"
            - "80:80"
        volumes:
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
            # - /etc/letsencrypt/:/etc/letsencrypt/
        restart: unless-stopped
        depends_on:
            - users-service
            - teams-service
            - posts-service
            - messages-service
        networks:
            - app

    redis:
        image: redis:7.2.3
        command: redis-server /etc/redis/redis.conf
        ports:
            - 6379:6379
        volumes:
            - ./redis/redis.conf:/etc/redis/redis.conf
        restart: unless-stopped
        networks:
            - app

    kafka:
        image: wurstmeister/kafka
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_HOST_NAME: kafka
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        deploy:
            resources:
                limits:
                    cpus: "1.0"
        restart: unless-stopped
        networks:
            - app
        depends_on:
            - zookeeper

    zookeeper:
        image: wurstmeister/zookeeper
        ports:
            - "2181:2181"
        networks:
            - app

    elasticsearch:
        image: elasticsearch:8.10.1
        volumes:
            - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        environment:
            - "discovery.type=single-node"
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        deploy:
            resources:
                limits:
                    cpus: "1.0"
        ports:
            - 9200:9200
            - 9300:9300
        restart: unless-stopped
        networks:
            - app

    prometheus:
        image: prom/prometheus
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
        ports:
            - 9090:9090
        restart: unless-stopped
        networks:
            - app

networks:
    app:
        driver: bridge

volumes:
    node_modules:
    users-vendor:
    messages-node_modules:
    users-data:
    teams-data:
    posts-data:
